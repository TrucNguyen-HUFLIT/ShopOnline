@{
    ViewData["Title"] = "Management Review";
    Layout = "~/Views/Shared/_LayoutManager.cshtml";
}
@model ShopOnline.Core.Models.Review.ReviewModel
@using X.PagedList.Mvc.Core;
@using Microsoft.AspNetCore.Mvc;
@using ShopOnline.Core.Models.Enum;

@{ 
    bool isWaiting = Model.ListReview.Any(x => x.ReviewStatus == AppEnum.ReviewStatus.Waiting);
    bool isApproved = Model.ListReview.Any(x => x.ReviewStatus == AppEnum.ReviewStatus.Approved);
    int currentReviewStatus = isWaiting ? 1 : isApproved ? 2 : 3;
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
    <div class="d-block mb-4 mb-md-0">
        <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
            <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                <li class="breadcrumb-item">
                    <a href="#">
                        <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
                    </a>
                </li>
                <li class="breadcrumb-item"><a>Management Review</a></li>
                <li class="breadcrumb-item active" aria-current="page">List Review</li>
            </ol>
        </nav>
        <h2 class="h4">List Review</h2>
    </div>
</div>
<div class="table-settings mb-4">
    <div class="row align-items-center justify-content-between">
        @using (Html.BeginForm("ListReview", "Review", FormMethod.Get))
        {
            <div class="col col-md-6 col-lg-3 col-xl-4">
                <div class="input-group me-2 me-lg-3 fmxw-400">
                    @*<input type="text" class="form-control" id="searchString" name="searchString" placeholder="Find by name or email">*@
                    <select class="form-select" name="reviewStatus" aria-label="Default select example">
                        @if (isWaiting)
                        {
                            <option value="1" selected> Waiting</option>
                            <option value="2">Approved</option>
                            <option value="3">Rejected</option>
                        }
                        else if (isApproved)
                        {
                            <option value="1">Waiting</option>
                            <option value="2" selected>Approved</option>
                            <option value="3">Rejected</option>
                        }
                        else
                        {
                            <option value="1">Waiting</option>
                            <option value="2">Approved</option>
                            <option value="3" selected>Rejected</option>
                        }
                    </select>
                    <button type="submit" value="Search" class="btn btn-sm btn-gray-800 d-inline-flex align-items-center">
                        Search
                    </button>
                </div>
            </div>
        }
    </div>
</div>
<div class="card card-body border-0 shadow table-wrapper table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Customer</th>
                <th>Product</th>
                <th>Content</th>
                <th>@Html.ActionLink("Review Time", "ListReview", new { sortOrder = ViewBag.ReviewTimeSortParm, reviewStatus = currentReviewStatus }, new { @class = "text-info" })</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Model.ListReview)
            {
                <tr>
                    <td>
                        @foreach (var customer in Model.ListCustomer)
                        {
                            if (customer.Id == review.IdCustomer)
                            {
                                @customer.FullName
                                break;
                            }
                        }
                    </td>
                    <td>
                        @foreach (var productDetail in Model.ListProductDetail)
                        {
                            if (productDetail.Id == review.IdProductDetail)
                            {
                                @productDetail.Name
                                break;
                            }
                        }
                    </td>
                    <td>
                        @review.Content
                    </td>
                    <td>
                        @review.ReviewTime
                    </td>
                    <td>
                        @if (@review.ReviewStatus == ShopOnline.Core.Models.Enum.AppEnum.ReviewStatus.Approved)
                        {
                            <span class="fw-bold text-success"> @review.ReviewStatus</span>
                        }

                        @if (@review.ReviewStatus == ShopOnline.Core.Models.Enum.AppEnum.ReviewStatus.Rejected)
                        {
                            <span class="fw-bold text-danger"> @review.ReviewStatus</span>
                        }

                        @if (@review.ReviewStatus == ShopOnline.Core.Models.Enum.AppEnum.ReviewStatus.Waiting)
                        {
                            <span class="fw-bold text-warning"> @review.ReviewStatus</span>
                        }
                    </td>
                    <td>
                        @if (@review.ReviewStatus == ShopOnline.Core.Models.Enum.AppEnum.ReviewStatus.Waiting)
                        {
                            <a onclick=ApproveReview(@review.Id) class="btn btn-primary" type="button">Approve</a>
                            <a onclick=RejectReview(@review.Id) class="btn btn-outline-primary" type="button">Reject</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    Page @(Model.ListReview.PageCount < Model.ListReview.PageNumber ? 0 : Model.ListReview.PageNumber) of @Model.ListReview.PageCount
    @Html.PagedListPager(Model.ListReview, page => Url.Action("ListReview",
    new { page, sortOrder = ViewBag.CurrentSort, reviewStatus = currentReviewStatus, currentFilter = ViewBag.CurrentFilter }))
    @*<div class="fw-normal small mt-4 mt-lg-0">Showing <b>5</b> out of <b>25</b> entries</div>*@
</div>